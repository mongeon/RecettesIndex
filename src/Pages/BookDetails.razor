@page "/books/{Id:int}"
@using MudBlazor
@using RecettesIndex.Models
@using RecettesIndex.Services
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject AuthService AuthService

<PageTitle>Livre - @(book?.Name ?? "Chargement...")</PageTitle>
<MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />

@if (loading)
{
    <MudContainer Class="d-flex flex-column align-center py-8">
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" Size="Size.Large" />
        <MudText Typo="Typo.h6" Class="mt-4">Chargement du livre...</MudText>
    </MudContainer>
}
else if (book == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Livre introuvable.</MudAlert>
}
else
{
    <HeroSection Title="@book.Name" 
                 Subtitle="@GetBookInfo()"
                 AdditionalInfo=""
                 Icon="@Icons.Material.Filled.MenuBook">
        <RightContent>
            <MudChip T="string" Size="Size.Large" Class="hero-chip">
                @relatedRecipes.Count Recette@(relatedRecipes.Count > 1 ? "s" : "")
            </MudChip>
        </RightContent>
    </HeroSection>

    <ActionBar BackUrl="/books" 
               BackText="Retour aux livres"
               ShowEditButton="true"
               ShowPrintButton="false"
               IsAuthenticated="@AuthService.IsAuthenticated"
               OnEditClick="@OpenEditDialog" />

    <MudGrid>
        <MudItem xs="12">
            <MudCard Elevation="3">
                <MudCardContent>
                    <MudTabs Rounded="true" Elevation="2" ApplyEffectsToContainer="true">
                        <MudTabPanel Text="Auteurs" Icon="@Icons.Material.Filled.Person">
                            @if (book.Authors != null && book.Authors.Count > 0)
                            {
                                <MudPaper Elevation="0" Class="pa-4 mud-background-gray rounded-lg">
                                    <MudList Dense="true" T="Author">
                                        @foreach (var author in book.Authors)
                                        {
                                            <MudListItem Href="@($"/authors/{author.Id}")">
                                                <div class="d-flex">
                                                    <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                                        @(author.Name.Length > 0 ? author.Name[0].ToString() : "")@(author.LastName?.Length > 0 ? author.LastName[0].ToString() : "")
                                                    </MudAvatar>
                                                    <MudText>@author.Name @author.LastName</MudText>
                                                </div>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudPaper>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Class="mt-3">Aucun auteur disponible pour ce livre.</MudAlert>
                            }
                        </MudTabPanel>
                        <MudTabPanel Text="Recettes" Icon="@Icons.Material.Filled.Restaurant">
                            @if (relatedRecipes != null && relatedRecipes.Count > 0)
                            {
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudGrid>
                                        @foreach (var recipe in relatedRecipes)
                                        {
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudCard Elevation="2" Class="ma-2 recipe-card">
                                                    <MudCardHeader>
                                                        <CardHeaderContent>
                                                            <MudText Typo="Typo.h6">@recipe.Name</MudText>
                                                        </CardHeaderContent>
                                                        <CardHeaderActions>
                                                            <PizzaRating ReadOnly="true" Value="@recipe.Rating" />
                                                        </CardHeaderActions>
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        @if (recipe.BookPage != null)
                                                        {
                                                            <MudText>Page: @recipe.BookPage</MudText>
                                                        }
                                                    </MudCardContent>
                                                    <MudCardActions>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                                                Href="@($"/recipes/{recipe.Id}")">
                                                            Voir les détails
                                                        </MudButton>
                                                    </MudCardActions>
                                                </MudCard>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudPaper>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Class="mt-3">Aucune recette trouvée dans ce livre.</MudAlert>
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] 
    public int Id { get; set; }
    
    private Book? book;
    private bool loading = true;
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Accueil", href: "/"),
        new BreadcrumbItem("Livres", href: "/books"),
        new BreadcrumbItem("Détails", href: null, disabled: true)
    };
    
    private List<Recipe> relatedRecipes = new();
    
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        try 
        {
            var response = await SupabaseClient.From<Book>().Where(x => x.Id == Id).Get();
            book = response.Models?.FirstOrDefault();
            
            if (book != null)
            {
                // Update the breadcrumbs with book name
                breadcrumbs[2] = new BreadcrumbItem(book.Name, href: null, disabled: true);
                
                // Load authors for this book using the junction table
                await LoadAuthorsForBook(book);
                
                // Get related recipes
                var recipesResponse = await SupabaseClient.From<Recipe>().Where(x => x.BookId == book.Id).Get();
                relatedRecipes = recipesResponse.Models ?? new List<Recipe>();
            }
        }
        catch (Exception ex)
        {
            // Add error handling if needed
            Console.WriteLine($"Error loading book: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadAuthorsForBook(Book bookToLoad)
    {
        try
        {
            // Get book-author associations
            var bookAuthorsResponse = await SupabaseClient.From<BookAuthor>()
                .Where(x => x.BookId == bookToLoad.Id)
                .Get();
            
            if (bookAuthorsResponse.Models?.Any() == true)
            {
                var authorIds = bookAuthorsResponse.Models.Select(ba => ba.AuthorId).ToList();
                
                // Get the actual author objects
                var authorsResponse = await SupabaseClient.From<Author>()
                    .Filter("id", Supabase.Postgrest.Constants.Operator.In, authorIds)
                    .Get();
                
                bookToLoad.Authors = authorsResponse.Models ?? new List<Author>();
            }
            else
            {
                bookToLoad.Authors = new List<Author>();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading authors for book {bookToLoad.Id}: {ex.Message}");
            bookToLoad.Authors = new List<Author>();
        }
    }
    
    private async Task OpenEditDialog()
    {
        if (book != null)
        {
            var parameters = new DialogParameters();
            parameters.Add("BookToEdit", book);
            
            var dialog = await DialogService.ShowAsync<EditBookDialog>("Modifier le livre", parameters);
            var result = await dialog.Result;
            
            if (result is not null && !result.Canceled && result.Data is Book updatedBook)
            {
                // Refresh the book data
                book = updatedBook;
                StateHasChanged();
            }
        }
    }

    private string GetBookInfo()
    {
        var info = new List<string>();
        
        if (book?.Authors != null && book.Authors.Any())
        {
            var authorsText = string.Join(", ", book.Authors.Select(a => $"{a.Name} {a.LastName}"));
            info.Add($"Auteur{(book.Authors.Count > 1 ? "s" : "")}: {authorsText}");
        }

        return string.Join(" • ", info);
    }
}
