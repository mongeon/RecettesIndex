@using MudBlazor
@using RecettesIndex.Services
@using Microsoft.AspNetCore.Components.Web
@inject AuthService AuthService
@inject MudBlazor.IDialogService DialogService

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">Connexion</MudText>
        <MudTextField @bind-Value="email" Label="Courriel" Variant="Variant.Outlined" Required="true" Class="mb-2" />
        <MudTextField @bind-Value="password" Label="Mot de passe" Variant="Variant.Outlined" InputType="InputType.Password" Required="true" Class="mb-2" @onkeypress="OnPasswordKeyPress" />
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="SignIn" Color="Color.Primary" Variant="Variant.Filled" Disabled="isSigningIn">
            @if (isSigningIn)
            {
                <MudProgressCircular Color="Color.Secondary" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ml-2">Connexion en cours...</MudText>
            }
            else
            {
                <MudText>Se connecter</MudText>
            }
        </MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary" Variant="Variant.Text" Disabled="isSigningIn">Annuler</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    public required IMudDialogInstance MudDialog { get; set; }
    private string email = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;
    private bool isSigningIn = false;

    private async Task SignIn()
    {
        if (isSigningIn)
            return;

        isSigningIn = true;
        errorMessage = null;
        
        try
        {
            var success = await AuthService.SignInAsync(email, password);
            if (success)
            {
                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                errorMessage = "Courriel ou mot de passe invalide.";
            }
        }
        catch (Exception ex)
        {
            // Log the actual exception for debugging but show user-friendly message
            Console.WriteLine($"Login error: {ex.Message}");
            errorMessage = "Erreur de connexion. Veuillez vérifier vos identifiants et réessayer.";
        }
        finally
        {
            isSigningIn = false;
            StateHasChanged();
        }
    }

    private async Task OnPasswordKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isSigningIn && !string.IsNullOrWhiteSpace(email) && !string.IsNullOrWhiteSpace(password))
        {
            await SignIn();
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}
