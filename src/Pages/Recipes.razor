@page "/recipes"
@using RecettesIndex.Models
@using MudBlazor
@inject RecettesIndex.Services.AuthService AuthService
@inject RecettesIndex.Services.Abstractions.IRecipeService RecipeService
@inject MudBlazor.IDialogService DialogService

<PageTitle>Recettes</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Recettes</MudText>
    <MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />
    <MudStack Row AlignItems="AlignItems.Center" Spacing="2" Class="mb-2">
    <MudTextField T="string" Value="@searchTerm" ValueChanged="OnSearchChanged" Placeholder="Rechercher des recettes..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" />
        <MudSelect T="string" Value="@ratingFilter" ValueChanged="OnRatingChanged" Clearable="true" Dense="true" Label="Évaluation" Class="min-w-200">
            <MudSelectItem T="string" Value='@("all")'>Toutes</MudSelectItem>
            <MudSelectItem T="string" Value='@("1")'>1</MudSelectItem>
            <MudSelectItem T="string" Value='@("2")'>2</MudSelectItem>
            <MudSelectItem T="string" Value='@("3")'>3</MudSelectItem>
            <MudSelectItem T="string" Value='@("4")'>4</MudSelectItem>
            <MudSelectItem T="string" Value='@("5")'>5</MudSelectItem>
        </MudSelect>
        <MudSelect T="string" Value="@bookFilter" ValueChanged="OnBookChanged" Clearable="true" Dense="true" Label="Livre" Class="min-w-200">
            <MudSelectItem T="string" Value='@("all")'>Tous</MudSelectItem>
            @foreach (var b in books)
            {
                <MudSelectItem T="string" Value="@b.Id.ToString()">@b.Name</MudSelectItem>
            }
        </MudSelect>
        <MudSelect T="string" Value="@authorFilter" ValueChanged="OnAuthorChanged" Clearable="true" Dense="true" Label="Auteur" Class="min-w-200">
            <MudSelectItem T="string" Value='@("all")'>Tous</MudSelectItem>
            @foreach (var a in authors)
            {
                <MudSelectItem T="string" Value="@a.Id.ToString()">@a.FullName</MudSelectItem>
            }
        </MudSelect>
    </MudStack>

    <MudTable T="Recipe" ServerData="LoadServerData" Hover="true" Elevation="1" Dense="true" RowsPerPage="20" @ref="table">
        <PagerContent>
            <MudTablePager InfoFormat="Affichage {first_item}-{last_item} sur {all_items}"
                           RowsPerPageString="Lignes par page:"
                           PageSizeOptions="new int[] { 10, 20, 50 }" />
        </PagerContent>
        <HeaderContent>
            <MudTh>Nom</MudTh>
            <MudTh>Évaluation</MudTh>
            <MudTh>Créée le</MudTh>
            <MudTh>Notes</MudTh>
            <MudTh>Livre</MudTh>
            @if (AuthService.IsAuthenticated)
            {
                <MudTh>Actions</MudTh>
            }
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Nom">
                <MudLink Href="@($"/recipes/{context.Id}")" Style="cursor:pointer">@context.Name</MudLink>
            </MudTd>
            <MudTd DataLabel="Évaluation">
                <PizzaRating Value="@context.Rating" />
            </MudTd>
            <MudTd DataLabel="Créée le">@context.CreationDate.ToShortDateString()</MudTd>
            <MudTd DataLabel="Notes">@context.Notes</MudTd>
            <MudTd DataLabel="Livre">
                @if (context.BookId != null)
                {
                    var book = books.FirstOrDefault(b => b.Id == context.BookId);
                    if (book != null)
                    {
                        <MudLink Href="@($"/books/{book.Id}")" Style="cursor:pointer">@book.Name</MudLink>
                    }
                }
            </MudTd>
            @if (AuthService.IsAuthenticated)
            {
                <MudTd>
                    <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowEditDialog(context)">Modifier</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteRecipe(context)">Supprimer</MudButton>
                </MudTd>
            }
        </RowTemplate>
    </MudTable>
    @if (AuthService.IsAuthenticated)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" OnClick="ShowAddDialog">Ajouter une recette</MudButton>
    }
</MudPaper>

@code {
    private MudTable<Recipe>? table;
    private List<Book> books = new();
    private List<Author> authors = new();
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Accueil", href: "/"),
        new BreadcrumbItem("Recettes", href: "/recipes", disabled: true)
    };
    private string searchTerm = string.Empty;
    private string? ratingFilter;
    private string? bookFilter;
    private string? authorFilter;

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        books = (await RecipeService.GetBooksAsync())?.ToList() ?? new();
        authors = (await RecipeService.GetAuthorsAsync())?.ToList() ?? new();
        await Reload();
    }

    private async Task ShowAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddRecipeDialog>("Ajouter une recette");
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadRecipes();
        }
    }

    private async Task ShowEditDialog(Recipe recipeToEdit)
    {
        var parameters = new MudBlazor.DialogParameters { ["RecipeToEdit"] = recipeToEdit };
        var dialog = await DialogService.ShowAsync<EditRecipeDialog>("Modifier la recette", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadRecipes();
        }
    }

    private async Task DeleteRecipe(Recipe recipeToDelete)
    {
        var res = await RecipeService.DeleteAsync(recipeToDelete.Id);
        if (res.IsSuccess)
        {
            await Reload();
        }
    }

    private async Task<TableData<Recipe>> LoadServerData(TableState state, CancellationToken token)
    {
    var page = state.Page + 1;
    var pageSize = state.PageSize;
    int? rating = (ratingFilter == "all" || string.IsNullOrWhiteSpace(ratingFilter)) ? null : (int.TryParse(ratingFilter, out var r) ? r : null);
    int? bookId = (bookFilter == "all" || string.IsNullOrWhiteSpace(bookFilter)) ? null : (int.TryParse(bookFilter, out var b) ? b : null);
    int? authorId = (authorFilter == "all" || string.IsNullOrWhiteSpace(authorFilter)) ? null : (int.TryParse(authorFilter, out var a) ? a : null);
    var result = await RecipeService.SearchAsync(searchTerm, rating, bookId, authorId, page, pageSize);
        if (!result.IsSuccess)
            return new TableData<Recipe> { Items = Array.Empty<Recipe>(), TotalItems = 0 };
        return new TableData<Recipe> { Items = result.Value.Items, TotalItems = result.Value.Total };
    }

    private async Task Reload()
    {
        if (table is not null)
        {
            await table.ReloadServerData();
        }
    }

    private async Task OnRatingChanged(string? value)
    {
        ratingFilter = value;
        await Reload();
    }

    private async Task OnBookChanged(string? value)
    {
        bookFilter = value;
        await Reload();
    }

    private async Task OnAuthorChanged(string? value)
    {
        authorFilter = value;
        await Reload();
    }

    private async Task OnSearchChanged(string value)
    {
        searchTerm = value;
        await Reload();
    }
}
