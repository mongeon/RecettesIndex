@using RecettesIndex.Pages
@inherits LayoutComponentBase
@using RecettesIndex.Services
@inject AuthService AuthService
@inject MudBlazor.IDialogService DialogService

<MudThemeProvider />
<MudDialogProvider />
<MudSnackbarProvider />
<MudPopoverProvider />
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-4" style="display: flex; justify-content: space-between; align-items: center;">
            <div>
                @if (!AuthService.IsAuthenticated)
                {
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="ShowSignInDialog">Sign In</MudButton>
                }
                else
                {
                    <MudTooltip Text="@AuthService.UserEmail">
                        <MudAvatar Size="Size.Medium" Color="Color.Primary" Class="me-2">
                            @GetUserInitials(AuthService.UserEmail)
                        </MudAvatar>
                    </MudTooltip>
                    <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="SignOut">Sign Out</MudButton>
                }
            </div>
        </div>
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private async Task ShowSignInDialog()
    {
      //  var parameters = new MudBlazor.DialogParameters();
        var options = new MudBlazor.DialogOptions { CloseButton = true, MaxWidth = MudBlazor.MaxWidth.Small };
        await DialogService.ShowAsync<SignInDialog>("Sign In", options);
        StateHasChanged();        
    }

    private async Task SignOut()
    {
        await AuthService.SignOutAsync();
        StateHasChanged();
    }

    private string GetUserInitials(string? email)
    {
        if (string.IsNullOrWhiteSpace(email)) return "?";
        var name = email.Split('@')[0];
        var parts = name.Split('.', '-', '_');
        if (parts.Length == 1) return name.Substring(0, 1).ToUpper();
        return string.Concat(parts.Select(p => p.Length > 0 ? char.ToUpper(p[0]) : '?')).Substring(0, Math.Min(2, parts.Count()));
    }
}
