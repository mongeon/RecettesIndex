@using MudBlazor
@using RecettesIndex.Models
@inject Supabase.Client SupabaseClient

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">Ajouter un Livre</MudText>
        <MudTextField @bind-Value="book.Name" Label="Nom" Required="true" Variant="Variant.Outlined" Class="mb-2" />
        <MudSelect T="Author" 
                   Label="Auteurs (optionnel)" 
                   @bind-SelectedValues="selectedAuthors" 
                   Variant="Variant.Outlined" 
                   Class="mb-2" 
                   MultiSelection="true"
                   ToStringFunc="@(author => $"{author.Name} {author.LastName}")"
                   Comparer="@(new AuthorComparer())">
            @foreach (var author in authors)
            {
                <MudSelectItem T="Author" Value="author">@author.Name @author.LastName</MudSelectItem>
            }
        </MudSelect>
        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="AddBook" Color="Color.Primary" Variant="Variant.Filled">Ajouter</MudButton>
        <MudButton OnClick="Cancel" Color="Color.Secondary" Variant="Variant.Text">Annuler</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] 
    public required IMudDialogInstance MudDialog { get; set; }
    private Book book = new();
    private string? errorMessage;
    private List<Author> authors = new();
    private IEnumerable<Author> selectedAuthors = new HashSet<Author>();

    protected override async Task OnInitializedAsync()
    {
        var response = await SupabaseClient.From<Author>().Get();
        authors = response.Models ?? new List<Author>();
    }

    private async Task AddBook()
    {
        errorMessage = null;
        try
        {
            // First, insert the book without authors
            var bookToInsert = new Book 
            { 
                Name = book.Name,
                CreationDate = DateTime.UtcNow
            };
            
            var response = await SupabaseClient.From<Book>().Insert(bookToInsert);
            
            if (response.Models?.Count > 0)
            {
                var insertedBook = response.Models[0];
                
                // Now handle the many-to-many relationship manually
                if (selectedAuthors.Any())
                {
                    await CreateBookAuthorAssociations(insertedBook.Id, selectedAuthors);
                }
                
                // Return the book with authors populated
                insertedBook.Authors = selectedAuthors.ToList();
                MudDialog.Close(DialogResult.Ok(insertedBook));
            }
            else
            {
                errorMessage = "Ã‰chec lors de l'ajout du livre.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Erreur: {ex.Message}";
            Console.WriteLine($"Error adding book: {ex}");
        }
    }

    private async Task CreateBookAuthorAssociations(int bookId, IEnumerable<Author> authors)
    {
        if (!authors.Any()) return;
        
        try
        {
            var bookAuthors = authors.Select(author => new BookAuthor
            {
                BookId = bookId,
                AuthorId = author.Id
            }).ToList();

            await SupabaseClient.From<BookAuthor>().Insert(bookAuthors);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating book-author associations: {ex.Message}");
            throw;
        }
    }
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private class AuthorComparer : IEqualityComparer<Author>
    {
        public bool Equals(Author? x, Author? y)
        {
            if (x == null && y == null) return true;
            if (x == null || y == null) return false;
            return x.Id == y.Id;
        }

        public int GetHashCode(Author obj)
        {
            return obj?.Id.GetHashCode() ?? 0;
        }
    }
}
