@page "/books"
@using MudBlazor
@using RecettesIndex.Models
@inject Supabase.Client SupabaseClient
@inject RecettesIndex.Services.AuthService AuthService
@inject MudBlazor.IDialogService DialogService

<PageTitle>Livres</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Livres</MudText>
    <MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />
    <MudTextField @bind-Value="searchTerm" Placeholder="Rechercher des livres..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" Immediate="true" @oninput="OnSearchChanged" />
    @if (loading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (books.Count == 0)
    {
        <MudText>Aucun livre trouv√©.</MudText>
    }
    else
    {
        <MudTable Items="filteredBooks" Hover="true" RowsPerPage="10" Elevation="1" Dense="true">
            <PagerContent>
                <MudTablePager InfoFormat="Affichage {first_item}-{last_item} sur {all_items}" 
                               RowsPerPageString="Lignes par page:" 
                               PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <HeaderContent>
                <MudTh> <MudTableSortLabel SortBy="new Func<Book, object>(x=>x.Name)">Titre</MudTableSortLabel></MudTh>
                <MudTh>Auteurs</MudTh>
                @if (AuthService.IsAuthenticated)
                {
                    <MudTh>Actions</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nom">
                    <MudLink Href="@($"/books/{context.Id}")" Style="cursor:pointer">@context.Name</MudLink>
                </MudTd>
                <MudTd DataLabel="Auteurs">
                    @if (context.Authors != null && context.Authors.Count > 0)
                    {
                        @string.Join(", ", context.Authors.Select(a => a.Name + (string.IsNullOrWhiteSpace(a.LastName) ? "" : $" {a.LastName}")))
                    }
                </MudTd>
                @if (AuthService.IsAuthenticated)
                {
                    <MudTd>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowEditDialog(context)">Modifier</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteBook(context)">Supprimer</MudButton>
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    }
    @if (AuthService.IsAuthenticated)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" OnClick="ShowAddDialog">Ajouter un livre</MudButton>
    }
</MudPaper>

@code {
    private List<Book> books = new();
    private bool loading = true;
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Accueil", href: "/"),
        new BreadcrumbItem("Livres", href: "/books", disabled: true)
    };
    private string searchTerm = string.Empty;
    private IEnumerable<Book> filteredBooks => string.IsNullOrWhiteSpace(searchTerm)
        ? books
        : books.Where(b => b.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || (b.Authors != null && b.Authors.Any(a => a.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))));
    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooks();
    }

    private async Task LoadBooks()
    {
        loading = true;
        try
        {
            var response = await SupabaseClient.From<Book>().Get();
            books = response.Models ?? new List<Book>();
        }
        catch
        {
            books = new List<Book>();
        }
        loading = false;
    }

    private async Task ShowAddDialog()
    {
        var dialog = await DialogService.ShowAsync<AddBookDialog>("Ajouter un livre");
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadBooks();
        }
    }

    private async Task ShowEditDialog(Book bookToEdit)
    {
        var parameters = new MudBlazor.DialogParameters { ["BookToEdit"] = bookToEdit };
        var dialog = await DialogService.ShowAsync<EditBookDialog>("Modifier le livre", parameters);
        var result = await dialog.Result;
        if (result is not null && !result.Canceled)
        {
            await LoadBooks();
        }
    }

    private async Task DeleteBook(Book bookToDelete)
    {
        await SupabaseClient.From<Book>().Where(x => x.Id == bookToDelete.Id).Delete();
        await LoadBooks();
    }
}
