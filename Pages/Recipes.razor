@page "/recipes"
@using RecettesIndex.Models
@using MudBlazor
@inject RecettesIndex.Services.AuthService AuthService
@inject Supabase.Client SupabaseClient
@inject MudBlazor.IDialogService DialogService

<PageTitle>Recettes</PageTitle>

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h5">Recettes</MudText>
    <MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />
    @if (loading)
    {
        <MudProgressCircular Indeterminate="true" />
    }
    else if (recipes.Count == 0)
    {
        <MudText>Aucune recette trouvée.</MudText>
    }
    else
    {
        <MudTextField @bind-Value="searchTerm" Placeholder="Rechercher des recettes..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Class="mb-2" Immediate="true" OnInput="OnSearchChanged" />
        <MudTable Items="filteredRecipes" Hover="true" RowsPerPage="10" Elevation="1" Dense="true">
            <PagerContent>
                <MudTablePager InfoFormat="Affichage {first_item}-{last_item} sur {all_items}" 
                               RowsPerPageString="Lignes par page:" 
                               PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
            <HeaderContent>
                <MudTh><MudTableSortLabel SortBy="new Func<Recipe, object>(x=>x.Name)">Nom</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<Recipe, object>(x=>x.Rating)">Évaluation</MudTableSortLabel></MudTh>
                <MudTh>Créée le</MudTh>
                <MudTh>Notes</MudTh>
                <MudTh>Livre</MudTh>
                @if (AuthService.IsAuthenticated)
                {
                    <MudTh>Actions</MudTh>
                }
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nom">
                    <MudLink Href="@($"/recipes/{context.Id}")" Style="cursor:pointer">@context.Name</MudLink>
                </MudTd>
                <MudTd DataLabel="Évaluation">
                    <PizzaRating Value="@context.Rating" />
                </MudTd>
                <MudTd DataLabel="Créée le">@context.CreationDate.ToShortDateString()</MudTd>
                <MudTd DataLabel="Notes">@context.Notes</MudTd>
                <MudTd DataLabel="Livre">
                    @if (context.BookId != null)
                    {
                        var book = books.FirstOrDefault(b => b.Id == context.BookId);
                        if (book != null)
                        {
                            <MudLink Href="@($"/books/{book.Id}")" Style="cursor:pointer">@book.Name</MudLink>
                        }
                    }
                </MudTd>
                @if (AuthService.IsAuthenticated)
                {
                    <MudTd>
                        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="() => ShowEditDialog(context)">Modifier</MudButton>
                        <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => DeleteRecipe(context)">Supprimer</MudButton>
                    </MudTd>
                }
            </RowTemplate>
        </MudTable>
    }
    @if (AuthService.IsAuthenticated)
    {
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mt-2" OnClick="ShowAddDialog">Ajouter une recette</MudButton>
    }
</MudPaper>

@code {
    private List<Recipe> recipes = new();
    private List<Book> books = new();
    private bool loading = true;
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Accueil", href: "/"),
        new BreadcrumbItem("Recettes", href: "/recipes", disabled: true)
    };
    private string searchTerm = string.Empty;
    private MudTable<Recipe> table;
    private IEnumerable<Recipe> filteredRecipes => string.IsNullOrWhiteSpace(searchTerm)
        ? recipes
        : recipes.Where(r => r.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) || (r.Notes != null && r.Notes.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));

    protected override async Task OnInitializedAsync()
    {
        await LoadRecipes();
    }

    private async Task LoadRecipes()
    {
        loading = true;
        try
        {
            var bookResponse = await SupabaseClient.From<Book>().Get();
            books = bookResponse.Models ?? new List<Book>();
            var response = await SupabaseClient.From<Recipe>().Get();
            recipes = response.Models ?? new List<Recipe>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des recettes: {ex.Message}");
            recipes = new List<Recipe>();
            books = new List<Book>();
        }
        loading = false;
    }

    private async Task ShowAddDialog()
    {
        var dialog = DialogService.Show<AddRecipeDialog>("Ajouter une recette");
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRecipes();
        }
    }

    private async Task ShowEditDialog(Recipe recipeToEdit)
    {
        var parameters = new MudBlazor.DialogParameters { ["RecipeToEdit"] = recipeToEdit };
        var dialog = DialogService.Show<EditRecipeDialog>("Modifier la recette", parameters);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await LoadRecipes();
        }
    }

    private async Task DeleteRecipe(Recipe recipeToDelete)
    {
        await SupabaseClient.From<Recipe>().Where(x => x.Id == recipeToDelete.Id).Delete();
        await LoadRecipes();
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        StateHasChanged();
    }
}
