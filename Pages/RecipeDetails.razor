@page "/recipes/{Id:int}"
@using MudBlazor
@using RecettesIndex.Models
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Recette - @(recipe?.Name ?? "Chargement...")</PageTitle>
<MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />

@if (loading)
{
    <MudProgressLinear Indeterminate="true" Class="my-4" />
}
else if (recipe == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Recette introuvable.</MudAlert>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Secondary" Size="Size.Large">
                            <MudIcon Icon="@Icons.Material.Filled.Restaurant" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">@recipe.Name</MudText>
                        <MudText Typo="Typo.body2">Ajoutée le @recipe.CreationDate.ToShortDateString()</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <PizzaRating ReadOnly="true" Value="@recipe.Rating" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTabs Rounded="true" Elevation="2" ApplyEffectsToContainer="true">
                        <MudTabPanel Text="Détails" Icon="@Icons.Material.Filled.Info">
                            <MudGrid>
                                <MudItem xs="12" md="6">
                                    @if (!string.IsNullOrEmpty(recipe.Notes))
                                    {
                                        <MudPaper Elevation="0" Class="pa-4 mud-background-gray rounded-lg">
                                            <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Notes" Class="mr-2" />Notes</MudText>
                                            <MudText Typo="Typo.body1" Style="white-space: pre-line">@recipe.Notes</MudText>
                                        </MudPaper>
                                    }
                                    else
                                    {
                                        <MudAlert Severity="Severity.Info" Class="mt-3">Aucune note pour cette recette.</MudAlert>
                                    }
                                </MudItem>
                                <MudItem xs="12" md="6">
                                    <MudPaper Elevation="0" Class="pa-4 rounded-lg">
                                        <MudText Typo="Typo.subtitle1"><MudIcon Icon="@Icons.Material.Filled.Book" Class="mr-2" />Informations sur la source</MudText>
                                        @if (book != null)
                                        {
                                            <MudList Clickable="false" Dense="true" T="Recipe">
                                                <MudListItem Icon="@Icons.Material.Filled.Book">
                                                    <MudText>Livre: <MudLink Href="@($"/books/{book.Id}")">@book.Name</MudLink></MudText>
                                                </MudListItem>
                                                
                                                @if (recipe.BookPage != null)
                                                {
                                                    <MudListItem Icon="@Icons.Material.Filled.MenuBook">
                                                        <MudText>Page: @recipe.BookPage</MudText>
                                                    </MudListItem>
                                                }
                                                
                                                @if (book.Authors != null && book.Authors.Count > 0)
                                                {
                                                    <MudListItem Icon="@Icons.Material.Filled.Person">
                                                        <MudText>
                                                            Auteur(s):
                                                            @foreach (var author in book.Authors)
                                                            {
                                                                <MudLink Href="@($"/authors/{author.Id}")" Class="mr-2">@author.Name @author.LastName</MudLink>
                                                            }
                                                        </MudText>
                                                    </MudListItem>
                                                }
                                            </MudList>
                                        }
                                        else
                                        {
                                            <MudAlert Severity="Severity.Info">Aucun livre associé à cette recette.</MudAlert>
                                        }
                                    </MudPaper>
                                </MudItem>
                            </MudGrid>
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Href="/recipes" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack">Retour</MudButton>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit" 
                              OnClick="@OpenEditDialog">Modifier</MudButton>
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Print" 
                              Href="@($"/recipes/{Id}/print")">Vue d'impression</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] 
    public int Id { get; set; }
    
    private Recipe? recipe;
    private Book? book;
    private bool loading = true;
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Accueil", href: "/"),
        new BreadcrumbItem("Recettes", href: "/recipes"),
        new BreadcrumbItem("Détails", href: null, disabled: true)
    };
    
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        try 
        {
            var response = await SupabaseClient.From<Recipe>().Where(x => x.Id == Id).Get();
            recipe = response.Models?.FirstOrDefault();
            
            if (recipe != null)
            {
                // Update the breadcrumbs with recipe name
                breadcrumbs[2] = new BreadcrumbItem(recipe.Name, href: null, disabled: true);
                
                if (recipe.BookId != null)
                {
                    var bookResponse = await SupabaseClient.From<Book>().Where(x => x.Id == recipe.BookId).Get();
                    book = bookResponse.Models?.FirstOrDefault();
                }
            }
        }
        catch (Exception ex)
        {
            // Add error handling if needed
            Console.WriteLine($"Error loading recipe: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
    
    
    private async Task OpenEditDialog()
    {
        if (recipe != null)
        {
            var parameters = new DialogParameters();
            parameters.Add("RecipeToEdit", recipe);
            
            var dialog = await DialogService.ShowAsync<EditRecipeDialog>("Modifier la recette", parameters);
            var result = await dialog.Result;
            
            if (!result.Canceled && result.Data is Recipe updatedRecipe)
            {
                // Refresh the recipe data
                recipe = updatedRecipe;
                StateHasChanged();
            }
        }
    }
}