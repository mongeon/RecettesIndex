@page "/books/{Id:int}"
@using MudBlazor
@using RecettesIndex.Models
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<PageTitle>Book - @(book?.Name ?? "Loading...")</PageTitle>
<MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />

@if (loading)
{
    <MudProgressLinear Indeterminate="true" Class="my-4" />
}
else if (book == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Book not found.</MudAlert>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Tertiary" Size="Size.Large">
                            <MudIcon Icon="@Icons.Material.Filled.Book" />
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">@book.Name</MudText>
                        <MudText Typo="Typo.body2">Added on @book.CreationDate.ToShortDateString()</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTabs Rounded="true" Elevation="2" ApplyEffectsToContainer="true">
                        <MudTabPanel Text="Authors" Icon="@Icons.Material.Filled.Person">
                            @if (book.Authors != null && book.Authors.Count > 0)
                            {
                                <MudPaper Elevation="0" Class="pa-4 mud-background-gray rounded-lg">
                                    <MudList Clickable="true" DisablePadding="true" T="Author">
                                        @foreach (var author in book.Authors)
                                        {
                                            <MudListItem Href="@($"/authors/{author.Id}")">
                                                <div class="d-flex">
                                                    <MudAvatar Color="Color.Primary" Size="Size.Small" Class="mr-2">
                                                        @(author.Name.Length > 0 ? author.Name[0].ToString() : "")@(author.LastName?.Length > 0 ? author.LastName[0].ToString() : "")
                                                    </MudAvatar>
                                                    <MudText>@author.Name @author.LastName</MudText>
                                                </div>
                                            </MudListItem>
                                        }
                                    </MudList>
                                </MudPaper>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Class="mt-3">No authors available for this book.</MudAlert>
                            }
                        </MudTabPanel>
                        <MudTabPanel Text="Recipes" Icon="@Icons.Material.Filled.Restaurant">
                            @if (relatedRecipes != null && relatedRecipes.Count > 0)
                            {
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudGrid>
                                        @foreach (var recipe in relatedRecipes)
                                        {
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudCard Elevation="2" Class="ma-2 recipe-card">
                                                    <MudCardHeader>
                                                        <CardHeaderContent>
                                                            <MudText Typo="Typo.h6">@recipe.Name</MudText>
                                                        </CardHeaderContent>
                                                        <CardHeaderActions>
                                                            <PizzaRating ReadOnly="true" Value="@recipe.Rating" />
                                                        </CardHeaderActions>
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        @if (recipe.BookPage != null)
                                                        {
                                                            <MudText>Page: @recipe.BookPage</MudText>
                                                        }
                                                    </MudCardContent>
                                                    <MudCardActions>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                                                Href="@($"/recipes/{recipe.Id}")">
                                                            View Details
                                                        </MudButton>
                                                    </MudCardActions>
                                                </MudCard>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudPaper>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Class="mt-3">No recipes found in this book.</MudAlert>
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Href="/books" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack">Back to Books</MudButton>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit"
                              OnClick="@OpenEditDialog">Edit</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] 
    public int Id { get; set; }
    
    private Book? book;
    private bool loading = true;
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Books", href: "/books"),
        new BreadcrumbItem("Details", href: null, disabled: true)
    };
    
    private List<Recipe> relatedRecipes = new();
    
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        try 
        {
            var response = await SupabaseClient.From<Book>().Where(x => x.Id == Id).Get();
            book = response.Models?.FirstOrDefault();
            
            if (book != null)
            {
                // Update the breadcrumbs with book name
                breadcrumbs[2] = new BreadcrumbItem(book.Name, href: null, disabled: true);
                
                // Get related recipes
                var recipesResponse = await SupabaseClient.From<Recipe>().Where(x => x.BookId == book.Id).Get();
                relatedRecipes = recipesResponse.Models ?? new List<Recipe>();
            }
        }
        catch (Exception ex)
        {
            // Add error handling if needed
            Console.WriteLine($"Error loading book: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
    
    private void OpenEditDialog()
    {
        NavigationManager.NavigateTo($"/books/{Id}/edit");
    }
}
