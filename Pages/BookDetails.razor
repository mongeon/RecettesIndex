@page "/books/{id:int}"
@using MudBlazor
@using RecettesIndex.Models
@inject Supabase.Client SupabaseClient

<PageTitle>Book Details</PageTitle>
<MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />

@if (loading)
{
    <MudProgressCircular Indeterminate="true" />
}
else if (book == null)
{
    <MudText>Book not found.</MudText>
}
else
{
    <MudPaper Class="pa-4">
        <MudText Typo="Typo.h5">@book.Name</MudText>
        <MudText>Created: @book.CreationDate.ToShortDateString()</MudText>
        <MudText>Authors: 
            @if (book.Authors != null && book.Authors.Count > 0)
            {
                @foreach (var author in book.Authors)
                {
                    <MudLink Href="@($"/authors/{author.Id}")" Style="margin-right:8px; cursor:pointer">@author.Name @author.LastName</MudLink>
                }
            }
            else
            {
                <span>None</span>
            }
        </MudText>
        <MudText>Related Recipes:</MudText>
        @if (relatedRecipes != null && relatedRecipes.Count > 0)
        {
            <MudList T="Recipe">
                @foreach (var recipe in relatedRecipes)
                {
                    <MudListItem>
                        <MudLink Href="@($"/recipes/{recipe.Id}")" Style="margin-right:8px; cursor:pointer">@recipe.Name</MudLink>
                    </MudListItem>
                }
            </MudList>
        }
        else
        {
            <MudText>None</MudText>
        }
        <MudButton Href="/books" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack">Back to Books</MudButton>
    </MudPaper>
}

@code {
    [Parameter] public int id { get; set; }
    private Book? book;
    private bool loading = true;
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Home", href: "/"),
        new BreadcrumbItem("Books", href: "/books"),
        new BreadcrumbItem("Details", href: null, disabled: true)
    };
    private List<Recipe> relatedRecipes = new();
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        var response = await SupabaseClient.From<Book>().Where(x => x.Id == id).Get();
        book = response.Models?.FirstOrDefault();
        if (book != null)
        {
            var recipesResponse = await SupabaseClient.From<Recipe>().Where(x => x.BookId == book.Id).Get();
            relatedRecipes = recipesResponse.Models ?? new List<Recipe>();
        }
        loading = false;
    }
}
