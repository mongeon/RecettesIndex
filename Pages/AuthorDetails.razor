@page "/authors/{Id:int}"
@using MudBlazor
@using RecettesIndex.Models
@using RecettesIndex.Services
@using Supabase.Postgrest
@inject Supabase.Client SupabaseClient
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject AuthService AuthService

<PageTitle>Auteur - @(author?.FullName ?? "Chargement...")</PageTitle>
<MudBreadcrumbs Items="breadcrumbs" Class="mb-4" />

@if (loading)
{
    <MudProgressLinear Indeterminate="true" Class="my-4" />
}
else if (author == null)
{
    <MudAlert Severity="Severity.Error" Class="my-4">Auteur introuvable.</MudAlert>
}
else
{
    <MudGrid>
        <MudItem xs="12">
            <MudCard Elevation="3">
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudAvatar Color="Color.Primary" Size="Size.Large">
                            @(author.Name.Length > 0 ? author.Name[0].ToString() : "")@(author.LastName?.Length > 0 ? author.LastName[0].ToString() : "")
                        </MudAvatar>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h4">@author.Name @author.LastName</MudText>
                        <MudText Typo="Typo.body2">Ajouté le @author.CreationDate.ToShortDateString()</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <MudTabs Rounded="true" Elevation="2" ApplyEffectsToContainer="true">
                        <MudTabPanel Text="Livres" Icon="@Icons.Material.Filled.Book">
                            @if (books != null && books.Count > 0)
                            {
                                <MudPaper Elevation="0" Class="pa-2">
                                    <MudGrid>
                                        @foreach (var book in books)
                                        {
                                            <MudItem xs="12" sm="6" md="4">
                                                <MudCard Elevation="2" Class="ma-2 book-card">
                                                    <MudCardHeader>
                                                        <CardHeaderAvatar>
                                                            <MudAvatar Color="Color.Tertiary" Size="Size.Small">
                                                                <MudIcon Icon="@Icons.Material.Filled.Book" />
                                                            </MudAvatar>
                                                        </CardHeaderAvatar>
                                                        <CardHeaderContent>
                                                            <MudText Typo="Typo.h6">@book.Name</MudText>
                                                        </CardHeaderContent>
                                                    </MudCardHeader>
                                                    <MudCardContent>
                                                        <MudText Typo="Typo.body2">Créé le: @book.CreationDate.ToShortDateString()</MudText>
                                                        @{
                                                            var recipeCount = relatedRecipes.Count(r => r.BookId == book.Id);
                                                        }
                                                        <MudText Typo="Typo.body2">Recettes: @recipeCount</MudText>
                                                    </MudCardContent>
                                                    <MudCardActions>
                                                        <MudButton Variant="Variant.Text" Color="Color.Primary" 
                                                                Href="@($"/books/{book.Id}")">
                                                            Voir le livre
                                                        </MudButton>
                                                    </MudCardActions>
                                                </MudCard>
                                            </MudItem>
                                        }
                                    </MudGrid>
                                </MudPaper>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Class="mt-3">Cet auteur n'a pas de livres.</MudAlert>
                            }
                        </MudTabPanel>
                        <MudTabPanel Text="Recettes" Icon="@Icons.Material.Filled.Restaurant">
                            @if (relatedRecipes != null && relatedRecipes.Count > 0)
                            {
                                <MudTable Items="@filteredRecipes" Dense="true" Hover="true" Bordered="false" Striped="true">
                                    <ToolBarContent>
                                        <MudText Typo="Typo.h6">Recettes par @author.Name @author.LastName</MudText>
                                        <MudSpacer />
                                        <MudTextField T="string" ValueChanged="@(s => FilterRecipes(s))" 
                                                    Placeholder="Rechercher" Adornment="Adornment.Start" 
                                                    AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" 
                                                    Class="mt-0 ml-2" />
                                    </ToolBarContent>
                                    <HeaderContent>
                                        <MudTh>Nom</MudTh>
                                        <MudTh>Livre</MudTh>
                                        <MudTh>Évaluation</MudTh>
                                        <MudTh>Page</MudTh>
                                        <MudTh>Actions</MudTh>
                                    </HeaderContent>
                                    <RowTemplate>
                                        <MudTd DataLabel="Nom">@context.Name</MudTd>
                                        <MudTd DataLabel="Livre">
                                            @if (context.Book != null)
                                            {
                                                <MudLink Href="@($"/books/{context.Book.Id}")">@context.Book.Name</MudLink>
                                            }
                                            else
                                            {
                                                <span>-</span>
                                            }
                                        </MudTd>
                                        <MudTd DataLabel="Évaluation">
                                            <PizzaRating ReadOnly="true" Value="@context.Rating" />
                                        </MudTd>
                                        <MudTd DataLabel="Page">@(context.BookPage.HasValue ? context.BookPage.Value.ToString() : "-")</MudTd>
                                        <MudTd DataLabel="Actions">
                                            <MudButton Variant="Variant.Text" Color="Color.Primary" Size="Size.Small"
                                                    Href="@($"/recipes/{context.Id}")">
                                                Voir
                                            </MudButton>
                                        </MudTd>
                                    </RowTemplate>
                                    <PagerContent>
                                        <MudTablePager />
                                    </PagerContent>
                                </MudTable>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Info" Class="mt-3">Aucune recette trouvée de cet auteur.</MudAlert>
                            }
                        </MudTabPanel>
                    </MudTabs>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Href="/authors" Variant="Variant.Text" StartIcon="@Icons.Material.Filled.ArrowBack">Retour aux auteurs</MudButton>
                    <MudSpacer />
                    @if (AuthService.IsAuthenticated)
                    {
                        <MudButton Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Edit"
                                  OnClick="@OpenEditDialog">Modifier</MudButton>
                    }
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter] 
    public int Id { get; set; }
    
    private Author? author;
    private bool loading = true;
    private List<BreadcrumbItem> breadcrumbs = new()
    {
        new BreadcrumbItem("Accueil", href: "/"),
        new BreadcrumbItem("Auteurs", href: "/authors"),
        new BreadcrumbItem("Détails", href: null, disabled: true)
    };
    
    private List<Book> books = new();
    private List<Recipe> relatedRecipes = new();
    private List<Recipe> filteredRecipes = new();
    private string searchString = "";
    
    protected override async Task OnInitializedAsync()
    {
        loading = true;
        
        try 
        {
            var response = await SupabaseClient.From<Author>().Where(x => x.Id == Id).Get();
            author = response.Models?.FirstOrDefault();
            
            if (author != null)
            {
                // Update the breadcrumbs with author name
                breadcrumbs[2] = new BreadcrumbItem($"{author.Name} {author.LastName}", href: null, disabled: true);
                
                // Get related books
                var result = await SupabaseClient.From<Recipe>()
                      .Select("*, book_id_info:books(authors!inner(id))")
                      .Filter("book_id_info.authors.id", Constants.Operator.Equals, Id)
                      .Get();
                
                relatedRecipes = result
                     .Models
                     .Where(x => x.Book != null && x.Book.Authors.Any(a => a.Id == Id)).ToList();
                
                filteredRecipes = relatedRecipes;
                
                // Extract unique books from the recipes
                books = relatedRecipes
                    .Where(r => r.Book != null)
                    .Select(r => r.Book!)
                    .GroupBy(b => b.Id)
                    .Select(g => g.First())
                    .ToList();
            }
        }
        catch (Exception ex)
        {
            // Add error handling if needed
            Console.WriteLine($"Error loading author: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
    
    private void FilterRecipes(string searchText)
    {
        searchString = searchText;
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredRecipes = relatedRecipes;
        }
        else
        {
            filteredRecipes = relatedRecipes.Where(r => 
                r.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) ||
                (r.Book?.Name?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true) ||
                (r.Notes?.Contains(searchText, StringComparison.OrdinalIgnoreCase) == true)
            ).ToList();
        }
    }
    
    private async Task OpenEditDialog()
    {
        if (author != null)
        {
            var parameters = new DialogParameters();
            parameters.Add("AuthorToEdit", author);
            
            var dialog = await DialogService.ShowAsync<EditAuthorDialog>("Modifier l'auteur", parameters);
            var result = await dialog.Result;
            
            if (result is not null && !result.Canceled && result.Data is Author updatedAuthor)
            {
                // Refresh the author data
                author = updatedAuthor;
                StateHasChanged();
            }
        }
    }
}